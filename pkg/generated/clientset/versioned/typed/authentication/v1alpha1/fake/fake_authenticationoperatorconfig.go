// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cluster-authentication-operator/pkg/apis/authentication/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAuthenticationOperatorConfigs implements AuthenticationOperatorConfigInterface
type FakeAuthenticationOperatorConfigs struct {
	Fake *FakeAuthenticationV1alpha1
}

var authenticationoperatorconfigsResource = schema.GroupVersionResource{Group: "authentication.operator.openshift.io", Version: "v1alpha1", Resource: "authenticationoperatorconfigs"}

var authenticationoperatorconfigsKind = schema.GroupVersionKind{Group: "authentication.operator.openshift.io", Version: "v1alpha1", Kind: "AuthenticationOperatorConfig"}

// Get takes name of the authenticationOperatorConfig, and returns the corresponding authenticationOperatorConfig object, and an error if there is any.
func (c *FakeAuthenticationOperatorConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.AuthenticationOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(authenticationoperatorconfigsResource, name), &v1alpha1.AuthenticationOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuthenticationOperatorConfig), err
}

// List takes label and field selectors, and returns the list of AuthenticationOperatorConfigs that match those selectors.
func (c *FakeAuthenticationOperatorConfigs) List(opts v1.ListOptions) (result *v1alpha1.AuthenticationOperatorConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(authenticationoperatorconfigsResource, authenticationoperatorconfigsKind, opts), &v1alpha1.AuthenticationOperatorConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.AuthenticationOperatorConfigList{ListMeta: obj.(*v1alpha1.AuthenticationOperatorConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.AuthenticationOperatorConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested authenticationOperatorConfigs.
func (c *FakeAuthenticationOperatorConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(authenticationoperatorconfigsResource, opts))
}

// Create takes the representation of a authenticationOperatorConfig and creates it.  Returns the server's representation of the authenticationOperatorConfig, and an error, if there is any.
func (c *FakeAuthenticationOperatorConfigs) Create(authenticationOperatorConfig *v1alpha1.AuthenticationOperatorConfig) (result *v1alpha1.AuthenticationOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(authenticationoperatorconfigsResource, authenticationOperatorConfig), &v1alpha1.AuthenticationOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuthenticationOperatorConfig), err
}

// Update takes the representation of a authenticationOperatorConfig and updates it. Returns the server's representation of the authenticationOperatorConfig, and an error, if there is any.
func (c *FakeAuthenticationOperatorConfigs) Update(authenticationOperatorConfig *v1alpha1.AuthenticationOperatorConfig) (result *v1alpha1.AuthenticationOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(authenticationoperatorconfigsResource, authenticationOperatorConfig), &v1alpha1.AuthenticationOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuthenticationOperatorConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAuthenticationOperatorConfigs) UpdateStatus(authenticationOperatorConfig *v1alpha1.AuthenticationOperatorConfig) (*v1alpha1.AuthenticationOperatorConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(authenticationoperatorconfigsResource, "status", authenticationOperatorConfig), &v1alpha1.AuthenticationOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuthenticationOperatorConfig), err
}

// Delete takes name of the authenticationOperatorConfig and deletes it. Returns an error if one occurs.
func (c *FakeAuthenticationOperatorConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(authenticationoperatorconfigsResource, name), &v1alpha1.AuthenticationOperatorConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAuthenticationOperatorConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(authenticationoperatorconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.AuthenticationOperatorConfigList{})
	return err
}

// Patch applies the patch and returns the patched authenticationOperatorConfig.
func (c *FakeAuthenticationOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AuthenticationOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(authenticationoperatorconfigsResource, name, data, subresources...), &v1alpha1.AuthenticationOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuthenticationOperatorConfig), err
}
